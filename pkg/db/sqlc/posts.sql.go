// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package sqlc

import (
	"context"

	"github.com/lib/pq"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts(title,content,user_id)
  VALUES ($1,$2,$3) RETURNING id, title, content, user_id, created_at, updated_at, tags
`

type CreatePostParams struct {
	Title   string `json:"title"`
	Content string `json:"content"`
	UserID  string `json:"user_id"`
}

func (q *Queries) CreatePost(ctx context.Context, arg *CreatePostParams) (*Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.Title, arg.Content, arg.UserID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		pq.Array(&i.Tags),
	)
	return &i, err
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT id, title, content, user_id, created_at, updated_at, tags FROM posts LIMIT COALESCE($1,1000)
`

func (q *Queries) GetAllPosts(ctx context.Context, dollar_1 interface{}) ([]*Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllPosts, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByID = `-- name: GetPostByID :one
SELECT id, title, content, user_id, created_at, updated_at, tags FROM posts WHERE ID=$1
`

func (q *Queries) GetPostByID(ctx context.Context, id int64) (*Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		pq.Array(&i.Tags),
	)
	return &i, err
}

const getPostByUserID = `-- name: GetPostByUserID :many
SELECT id, title, content, user_id, created_at, updated_at, tags FROM posts WHERE user_id=$1
`

func (q *Queries) GetPostByUserID(ctx context.Context, userID string) ([]*Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
